snippet inc "include (local)"
#include "${1}"
${0}
endsnippet

snippet incs "include (system)"
#include <${1}>
${0}
endsnippet

snippet us "using X = Y"
using ${1} = ${2};
${0}
endsnippet

snippet un "using namespace X"
using namespace ${1:std};
${0}
endsnippet

snippet ns "namespace X"
namespace ${1:/* name */} {

${0}

} // namespace $1
endsnippet

snippet if "if"
if(${1:condition})
{
	${0}
}
endsnippet

snippet ife "if-else"
if(${1:condition})
{
	${2}
}
else
{
	${0}
}
endsnippet

snippet for "for-loop"
for(${1}; ${2}; ${3})
{
	${0}
}
endsnippet

snippet fu "function"
${1} ${2}(${3})
{
	${0}
}
endsnippet

snippet tfu "template function"
template<typename ${1}>
${2} ${3}(${4})
{
	${0}
}
endsnippet

snippet cl "class"
class ${1}
{
public:
	$1(${2})
	: ${3}
	{
	}

private:
	${0}
};
endsnippet

snippet tcl "template class"
template<typename ${1}>
class ${2}
{
public:
	$2(${3})
	: ${4}
	{
	}

private:
	${0}
};
endsnippet

snippet la "lambda"
auto ${1} = [${2:/* capture */}](${3:/* args */}) ${4:mutable} ${5:noexcept} -> ${6:/* return */} {
	${0:/* code */}
}
endsnippet

snippet laval "lambda"
auto ${1} = [=](${2}) {
	${0}
}
endsnippet

snippet laref "lambda"
auto ${1} = [&](${2}) {
	${0}
}
endsnippet

snippet st "struct"
struct ${1}
{
	${0}
};
endsnippet

snippet un "union"
union ${1}
{
	${0}
};
endsnippet

snippet ans "anonymous namespace"
namespace {

${0}

} // anonymous namespace
endsnippet

snippet guards "header's guards"
#ifndef ${1}
#define $1

${0}

#endif // $1
endsnippet

snippet main "main function"
int main(int argc, char* argv[])
{
	${0}
	return 0;
}
endsnippet
