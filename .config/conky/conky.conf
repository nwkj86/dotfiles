--[[
Conky, a system monitor, based on torsmo

Any original torsmo code is licensed under the BSD license

All code written since the fork of torsmo is licensed under the GPL

Please see COPYING for details

Copyright (c) 2004, Hannu Saransaari and Lauri Hakkarainen
Copyright (c) 2005-2019 Brenden Matthews, Philip Kovacs, et. al. (see AUTHORS)
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
]]

config = {
    header_font_size = 16,
    font_size = 10,
    graph_height = 12,
    width = 240,
    --
    cpu_num = 8,
    top_cpu_count = 3,
    top_mem_count = 3,
    mount_points = {{'/', '/'}, {'/home', '/home'}, {'/run/media/artur2/BigDisk', 'BigDisk'}},
    block_devs = {{'/dev/nvme0n1', '/dev/nvme0n1'}, {'/dev/disk/by-label/BigDisk', 'BigDisk'}},
    interfaces = {{'wlp3s0', 'wireless'}, {'enp0s31f6', 'ethernet'}, {'tun0', 'VPN - home'}, {'tun1', 'VPN - Maven'}}
}

conky.config = {
    alignment = 'top_right',
    background = false,
    border_width = 1,
    cpu_avg_samples = 1,
    if_up_strictness = 'address',
    default_color = 'white',
    default_outline_color = 'white',
    default_shade_color = 'white',
    double_buffer = true,
    draw_borders = false,
    draw_graph_borders = true,
    draw_outline = false,
    draw_shades = false,
    extra_newline = false,
    font = 'xos4 Terminus:size=' .. config.font_size,
    gap_x = 10,
    gap_y = 70,
    minimum_height = 5,
    minimum_width = 240,
    net_avg_samples = 2,
    no_buffers = true,
    out_to_console = false,
    out_to_ncurses = false,
    out_to_stderr = false,
    out_to_x = true,
    own_window = true,
    own_window_argb_visual = true,
    own_window_class = 'Conky',
    own_window_hints = 'undecorated,below,sticky,skip_taskbar,skip_pager',
    own_window_transparent = true,
    own_window_type = 'dock',
    show_graph_range = false,
    show_graph_scale = false,
    stippled_borders = 0,
    update_interval = 1.0,
    uppercase = false,
    use_spacer = 'none',
    use_xft = true,
}


function color(c)
    return string.format('${color %s}', c)
end

function font(s, c)
    c = c or 'white'
    return color(c) .. string.format('${font xos4 Terminus:size=%d}', s)
end

function header(t)
    return font(config.header_font_size, 'orange') .. t .. ' $hr' .. font(config.font_size)
end

function get_cpu_section()
    function cpu_graph(c, h, w)
        return string.format('${cpugraph cpu %d %d,%d}', c, h, w)
    end

    function cpu(c)
        return string.format('${cpu cpu%d}%%', c)
    end

    function freq(c)
        -- counting from 1
        return string.format('${freq_g %d}', c + 1)
    end

    function temp()
        return '${ibm_temps 0}°C'
    end

    function fan()
        return '${ibm_fan} rpm'
    end

    local t = {}
    t[#t + 1] = header('CPU')

    for i = 0, config.cpu_num - 1, 1 do
        t[#t + 1] = 'CPU ' .. i .. ' (' .. freq(i) .. 'GHz):${alignr}' .. cpu(i)
        t[#t + 1] = cpu_graph(i, config.graph_height, config.width)
    end

    t[#t + 1] = 'temp: ' .. temp() .. '${alignr}' .. 'fan ' .. fan()

    t[#t + 1] = '\ntop:'
    for i = 1, config.top_cpu_count do
        t[#t + 1] = string.format('${top name %d}${alignr}${top cpu %d}%%', i, i)
    end
    return table.concat(t, '\n')
end

function get_gpu_section()
    function mem_graph(h, w)
        return string.format('${nvidiagraph memused %d,%d 0}', h, w)
    end

    function gpu_graph(h, w)
        return string.format('${nvidiagraph gpuutil %d,%d 0}', h, w)
    end

    local t = {}
    t[#t + 1] = header('GPU')
    t[#t + 1] = 'GPU usage${alignr}${nvidia gpuutil}%'
    t[#t + 1] = gpu_graph(config.graph_height, config.width)
    t[#t + 1] = 'Mem usage:${alignr}${nvidia memused}MiB/${nvidia memmax}MiB'
    t[#t + 1] = mem_graph(config.graph_height, config.width)
    t[#t + 1] = 'temp: ${nvidia temp}°C${alignr}${nvidia gpufreq}MHz/${nvidia memfreq}MHz'
    return table.concat(t, '\n')
end

function get_ram_section()
    function mem_graph(h, w)
        return string.format('${memgraph %d,%d}', h, w)
    end

    function mem_bar(h, w)
        return string.format('${membar %d,%d}', h, w)
    end

    local t = {}
    t[#t + 1] = header('RAM')
    t[#t + 1] = 'Usage:${alignr}' .. '${mem}/${memmax}'
    t[#t + 1] = mem_bar(config.graph_height, config.width)
    t[#t + 1] = mem_graph(config.graph_height, config.width)

    t[#t + 1] = '\ntop:'
    for i = 1, config.top_mem_count do
        t[#t + 1] = string.format('${top_mem name %d}${alignr}${top_mem mem %d}%%', i, i)
    end

    return table.concat(t, '\n')
end

function get_disk_section()
    function add_mountpoint(t, mp, n)
        function get_fs_bar(h, w)
            return string.format('${fs_bar %d,%d %s}', h, w, mp)
        end
        n = n or mp

        local s = string.format('${if_mounted %s}', mp)
        local e = '${endif}'

        t[#t + 1] = s
        .. '\n' .. n .. '${alignr}${fs_used ' .. mp .. '}/${fs_size ' .. mp .. '}'
        .. '\n' .. get_fs_bar(config.graph_height, config.width)
        .. e
    end

    function add_device(t, dev, n)
        function get_io_graph(h, w)
            return string.format('I/O: %s ${alignr}${diskio %s}\n${diskiograph %s %d,%d}', n, dev, dev, h, w)
        end

        n = n or dev

        local s = string.format('${if_existing %s}', dev)
        local e = '${endif}'

        t[#t + 1] = s
        .. '\n' .. get_io_graph(config.graph_height, config.width)
        .. e
    end


    local t = {}
    t[#t + 1] = header('DISK')

    for i = 1, #config.mount_points do
        e = config.mount_points[i]
        add_mountpoint(t, e[1], e[2])
    end
    for i = 1, #config.block_devs do
        e = config.block_devs[i]
        add_device(t, e[1], e[2])
    end
    return table.concat(t, '')
end

function get_net_section()
    function add_interface(t, n)
        function add_graph(d, h, w)
            if d then
                return string.format('Down: (${totaldown %s})${alignr}${downspeed %s}\n${downspeedgraph %s %d,%d}', n, n, n, h, w)
            else
                return string.format('Up: (${totalup %s})${alignr}${upspeed %s}\n${upspeedgraph %s %d,%d}', n, n, n, h, w)
            end
        end

        local s = '${if_up ' .. n .. '}'
        local e = '${endif}'

        t[#t + 1] = s
        .. '\n' .. n .. '${alignr}${addr ' .. n .. '}'
        .. '\n' .. add_graph(true, config.graph_height, config.width)
        .. '\n' .. add_graph(false, config.graph_height, config.width)
        .. e
    end

    local t = {}
    t[#t + 1] = header('NET')

    for i = 1, #config.interfaces do
        e = config.interfaces[i]
        add_interface(t, e[1], e[2])
    end

    return table.concat(t, '')
end

conky.text = ''
.. get_cpu_section() .. '\n\n'
.. get_gpu_section() .. '\n\n'
.. get_ram_section() .. '\n\n'
.. get_disk_section() .. '\n\n'
.. get_net_section() .. '\n\n'

